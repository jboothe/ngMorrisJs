{"version":3,"sources":["app-module.js","line/line.tpl.html","home/home.tpl.html","line/line-module.js","line/line-routes.js","app.js","line/line-controller.js","home/home-module.js","home/home-routes.js","home/home-controller.js","home/drivers-service.js","directives/ng-morris-js.js","app-routes.js"],"names":["angular","module","run","$templateCache","put","config","$stateProvider","state","url","templateUrl","controller","controllerAs","$inject","LineCtrl","vm","this","ctrlName","HomeCtrl","$log","$q","DriversService","activate","promises","getDriverRaceResults","all","then","info","findAll","res","length","homeCtrl","driverLineChart","data","negativeData","driverBarChart","getDonutData","error","driverDonutChart","arr","props","newArr","map","x","i","yLabelPosFormatter","y","isNaN","Math","round","yLabelMPHFormatter","toFixed","options","xkey","ykeys","labels","lineColors","lineWidth","pointSize","pointFillColors","pointStrokeColors","ymin","ymax","smooth","hideHover","parseTime","yLabelFormat","goals","goalLineColors","goalStrokeWidth","grid","resize","fillOpacity","behaveLikeLine","barColors","stacked","label","value","colors","deferred","defer","resolve","driverSeasonResults","promise","findById","id","employee","aggregateDonutData2","arr2","Object","keys","item","status","reduce","acc","curr","service","qualifyPos","finishPos","points","avgLap","fastLap","factory","directive","restrict","scope","chartData","chartOptions","replace","template","link","element","$watch","chartInstance","setData","Morris","Line","Area","Bar","Donut","$urlRouterProvider","otherwise"],"mappings":"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","file":"app-cb33a7851a.js","sourcesContent":["(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name ngMorrisJs\n   * @description\n   *\n   */\n  angular\n    .module('ngMorrisJs', [\n      'ui.router',\n      'ui.bootstrap',\n      'home',\n      'drivers',\n      'line'\n    ]);\n}());\n","<h2>line</h2>\n<p>{{line.ctrlName}}</p>","<div class=\"jumbotron\">\n  <!--\n  <div class=\"\">\n    <div class=\"card-background\">\n        <img class=\"card-bkimg\" alt=\"\" src=\"images/bg-red-paper.jpg\">\n    </div>\n  </div>\n  -->\n  <div class=\"container\">\n    <h1 class=\"thin\">ngMorrisJs </h1>\n    <p>AngularJS Chart Directives for MorrisJS Area, Line, Bar and Donut Charts</p>\n    <p>\n      ngMorrisJS supports configuration of ALL Morris Chart options where others allow for only a few chart options.\n    </p>\n\n    <hr/>\n\n    <div class=\"row\">\n\n        <!-- item -->\n        <div class=\"col-md-4 text-center\">\n            <div class=\"panel panel-danger panel-pricing\">\n                <div class=\"panel-heading\">\n                    <i class=\"fa fa-check-square-o\"></i>\n                    <h3>Features</h3>\n                </div>\n\n                <ul class=\"list-group text-center\">\n                    <li class=\"list-group-item\"> Very Easy to Use</li>\n                    <li class=\"list-group-item\"> Use Any/All MorrisJS Options</li>\n                    <li class=\"list-group-item\"> Reverse Range Tips</li>\n                    <li class=\"list-group-item\"> Demos &amp; Tutorials</li>\n                    <li class=\"list-group-item\"> Angular Best Practices</li>\n                </ul>\n\n            </div>\n        </div>\n        <!-- /column 1 -->\n\n        <div class=\"col-md-8\">\n          <ng-morris-line-chart\n            chart-options=\"homeCtrl.driverLineChart.options\"\n            chart-data=\"homeCtrl.driverLineChart.data\">\n          </ng-morris-line-chart>\n        </div>\n\n      </div>\n      <!-- /row -->\n  </div>\n  <!-- /container -->\n</div>\n<!-- /jumbotron -->\n\n\n\n\n\n<!-- <div ng-controller=\"DriverChartsCtrl as vm\"> -->\n<div class=\"container\">\n\n  <h1 class=\"md-headline font-thin m-t-sm\">Line Chart</h1>\n  <ng-morris-line-chart\n    chart-options=\"homeCtrl.driverLineChart.options\"\n    chart-data=\"homeCtrl.driverLineChart.data\">\n  </ng-morris-line-chart>\n  <div class=\"md-caption w-full text-center m-t-n\">Rounds</div>\n\n  <h1 class=\"md-headline font-thin m-t-sm\">Area Chart</h1>\n  <ng-morris-area-chart\n    chart-options=\"homeCtrl.driverLineChart.options\"\n    chart-data=\"homeCtrl.driverLineChart.data\">\n  </ng-morris-area-chart>\n  <div class=\"md-caption w-full text-center m-t-n\">Rounds</div>\n\n  <h1 class=\"md-headline font-thin m-t-sm\">Bar Chart</h1>\n  <ng-morris-bar-chart\n    chart-options=\"homeCtrl.driverBarChart.options\"\n    chart-data=\"homeCtrl.driverLineChart.data\">\n  </ng-morris-bar-chart>\n  <div class=\"md-caption w-full text-center m-t-n\">Rounds</div>\n\n  <h1 class=\"md-headline font-thin m-t-sm\">Donut Chart</h1>\n  <ng-morris-donut-chart\n    chart-options=\"homeCtrl.driverDonutChart.options\"\n    chart-data=\"homeCtrl.driverDonutChart.data\">\n  </ng-morris-donut-chart>\n\n\n  <h1 class=\"md-display-1 font-thin m-t-md\">Finishing Status</h1>\n  <div>\n    <table class=\"text-center w-full\">\n      <thead>\n      <tr>\n        <th>ROUND</th>\n        <th>QUALIFY</th>\n        <th>FINISH</th>\n        <th>STATUS</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr ng-repeat=\"res in homeCtrl.driverLineChart.data track by res.id\" ng-class-odd=\"'jb-list-odd'\">\n        <td>{{res.round}}</td>\n        <td>{{-res.qualifyPos}}</td>\n        <td>{{-res.finishPos}}</td>\n        <td>{{res.status}}</td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n\n  <!--<jb-donut-chart\n    jb-chart-options=\"homeCtrl.driverDonutChart.options\"\n    jb-chart-data=\"homeCtrl.driverDonutChart.data\"></jb-donut-chart>-->\n\n</div>\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name line\n   * @description\n   *\n   */\n  angular\n    .module('line', [\n      'ui.router'\n    ]);\n}());\n","(function () {\n  'use strict';\n\n  angular\n    .module('line')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('line', {\n        url: '/line',\n        templateUrl: 'line/views/line.tpl.html',\n        controller: 'LineCtrl',\n        controllerAs: 'line'\n      });\n  }\n}());\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name ngMorrisJs\n   * @description\n   *\n   */\n  angular\n    .module('ngMorrisJs', [\n      'ui.router',\n      'ui.bootstrap',\n      'home',\n      'drivers',\n      'line'\n    ]);\n}());\n\nangular.module('ngMorrisJs').run(['$templateCache', function($templateCache) {\n  $templateCache.put('line/line.tpl.html',\n    '<h2>line</h2>\\n' +\n    '<p>{{line.ctrlName}}</p>');\n}]);\n\nangular.module('ngMorrisJs').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/home.tpl.html',\n    '<div class=\"jumbotron\">\\n' +\n    '  <!--\\n' +\n    '  <div class=\"\">\\n' +\n    '    <div class=\"card-background\">\\n' +\n    '        <img class=\"card-bkimg\" alt=\"\" src=\"images/bg-red-paper.jpg\">\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '  -->\\n' +\n    '  <div class=\"container\">\\n' +\n    '    <h1 class=\"thin\">ngMorrisJs </h1>\\n' +\n    '    <p>AngularJS Chart Directives for MorrisJS Area, Line, Bar and Donut Charts</p>\\n' +\n    '    <p>\\n' +\n    '      ngMorrisJS supports configuration of ALL Morris Chart options where others allow for only a few chart options.\\n' +\n    '    </p>\\n' +\n    '\\n' +\n    '    <hr/>\\n' +\n    '\\n' +\n    '    <div class=\"row\">\\n' +\n    '\\n' +\n    '        <!-- item -->\\n' +\n    '        <div class=\"col-md-4 text-center\">\\n' +\n    '            <div class=\"panel panel-danger panel-pricing\">\\n' +\n    '                <div class=\"panel-heading\">\\n' +\n    '                    <i class=\"fa fa-check-square-o\"></i>\\n' +\n    '                    <h3>Features</h3>\\n' +\n    '                </div>\\n' +\n    '\\n' +\n    '                <ul class=\"list-group text-center\">\\n' +\n    '                    <li class=\"list-group-item\"> Very Easy to Use</li>\\n' +\n    '                    <li class=\"list-group-item\"> Use Any/All MorrisJS Options</li>\\n' +\n    '                    <li class=\"list-group-item\"> Reverse Range Tips</li>\\n' +\n    '                    <li class=\"list-group-item\"> Demos &amp; Tutorials</li>\\n' +\n    '                    <li class=\"list-group-item\"> Angular Best Practices</li>\\n' +\n    '                </ul>\\n' +\n    '\\n' +\n    '            </div>\\n' +\n    '        </div>\\n' +\n    '        <!-- /column 1 -->\\n' +\n    '\\n' +\n    '        <div class=\"col-md-8\">\\n' +\n    '          <ng-morris-line-chart\\n' +\n    '            chart-options=\"homeCtrl.driverLineChart.options\"\\n' +\n    '            chart-data=\"homeCtrl.driverLineChart.data\">\\n' +\n    '          </ng-morris-line-chart>\\n' +\n    '        </div>\\n' +\n    '\\n' +\n    '      </div>\\n' +\n    '      <!-- /row -->\\n' +\n    '  </div>\\n' +\n    '  <!-- /container -->\\n' +\n    '</div>\\n' +\n    '<!-- /jumbotron -->\\n' +\n    '\\n' +\n    '\\n' +\n    '\\n' +\n    '\\n' +\n    '\\n' +\n    '<!-- <div ng-controller=\"DriverChartsCtrl as vm\"> -->\\n' +\n    '<div class=\"container\">\\n' +\n    '\\n' +\n    '  <h1 class=\"md-headline font-thin m-t-sm\">Line Chart</h1>\\n' +\n    '  <ng-morris-line-chart\\n' +\n    '    chart-options=\"homeCtrl.driverLineChart.options\"\\n' +\n    '    chart-data=\"homeCtrl.driverLineChart.data\">\\n' +\n    '  </ng-morris-line-chart>\\n' +\n    '  <div class=\"md-caption w-full text-center m-t-n\">Rounds</div>\\n' +\n    '\\n' +\n    '  <h1 class=\"md-headline font-thin m-t-sm\">Area Chart</h1>\\n' +\n    '  <ng-morris-area-chart\\n' +\n    '    chart-options=\"homeCtrl.driverLineChart.options\"\\n' +\n    '    chart-data=\"homeCtrl.driverLineChart.data\">\\n' +\n    '  </ng-morris-area-chart>\\n' +\n    '  <div class=\"md-caption w-full text-center m-t-n\">Rounds</div>\\n' +\n    '\\n' +\n    '  <h1 class=\"md-headline font-thin m-t-sm\">Bar Chart</h1>\\n' +\n    '  <ng-morris-bar-chart\\n' +\n    '    chart-options=\"homeCtrl.driverBarChart.options\"\\n' +\n    '    chart-data=\"homeCtrl.driverLineChart.data\">\\n' +\n    '  </ng-morris-bar-chart>\\n' +\n    '  <div class=\"md-caption w-full text-center m-t-n\">Rounds</div>\\n' +\n    '\\n' +\n    '  <h1 class=\"md-headline font-thin m-t-sm\">Donut Chart</h1>\\n' +\n    '  <ng-morris-donut-chart\\n' +\n    '    chart-options=\"homeCtrl.driverDonutChart.options\"\\n' +\n    '    chart-data=\"homeCtrl.driverDonutChart.data\">\\n' +\n    '  </ng-morris-donut-chart>\\n' +\n    '\\n' +\n    '\\n' +\n    '  <h1 class=\"md-display-1 font-thin m-t-md\">Finishing Status</h1>\\n' +\n    '  <div>\\n' +\n    '    <table class=\"text-center w-full\">\\n' +\n    '      <thead>\\n' +\n    '      <tr>\\n' +\n    '        <th>ROUND</th>\\n' +\n    '        <th>QUALIFY</th>\\n' +\n    '        <th>FINISH</th>\\n' +\n    '        <th>STATUS</th>\\n' +\n    '      </tr>\\n' +\n    '      </thead>\\n' +\n    '      <tbody>\\n' +\n    '      <tr ng-repeat=\"res in homeCtrl.driverLineChart.data track by res.id\" ng-class-odd=\"\\'jb-list-odd\\'\">\\n' +\n    '        <td>{{res.round}}</td>\\n' +\n    '        <td>{{-res.qualifyPos}}</td>\\n' +\n    '        <td>{{-res.finishPos}}</td>\\n' +\n    '        <td>{{res.status}}</td>\\n' +\n    '      </tr>\\n' +\n    '      </tbody>\\n' +\n    '    </table>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <!--<jb-donut-chart\\n' +\n    '    jb-chart-options=\"homeCtrl.driverDonutChart.options\"\\n' +\n    '    jb-chart-data=\"homeCtrl.driverDonutChart.data\"></jb-donut-chart>-->\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name line\n   * @description\n   *\n   */\n  angular\n    .module('line', [\n      'ui.router'\n    ]);\n}());\n\n(function () {\n  'use strict';\n\n  config.$inject = [\"$stateProvider\"];\n  angular\n    .module('line')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('line', {\n        url: '/line',\n        templateUrl: 'line/views/line.tpl.html',\n        controller: 'LineCtrl',\n        controllerAs: 'line'\n      });\n  }\n}());\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name line.controller:LineCtrl\n   *\n   * @description\n   *\n   */\n  angular\n    .module('line')\n    .controller('LineCtrl', LineCtrl);\n\n  function LineCtrl() {\n    var vm = this;\n    vm.ctrlName = 'LineCtrl';\n  }\n}());\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name home\n   * @description\n   *\n   */\n  angular\n    .module('home', [\n      'ui.router'\n    ]);\n}());\n\n(function () {\n  'use strict';\n\n  config.$inject = [\"$stateProvider\"];\n  angular\n    .module('home')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/home',\n        templateUrl: 'home/home.tpl.html',\n        controller: 'HomeCtrl',\n        controllerAs: 'homeCtrl'\n      });\n  }\n}());\n\n/**\n * @ngdoc object\n * @name HomeCtrl\n * @description Controller for  screens\n * @author Created by jboothe on 11/25/15\n */\n\n(function () {\n  'use strict';\n  var ctrlName = 'HomeCtrl';\n\n  angular\n    .module('home')\n    .controller(ctrlName, HomeCtrl);\n\n  HomeCtrl.$inject = ['$log', '$q', 'DriversService'];\n  function HomeCtrl($log, $q, DriversService) {\n    var homeCtrl = this;\n\n    // Line & Area Chart Options\n    // http://morrisjs.github.io/morris.js/lines.html\n    homeCtrl.driverLineChart = {\n      data: [],\n      options: {\n        xkey: 'round',\n        ykeys: ['finishPos', 'qualifyPos'],\n        labels: ['Finished', 'Qualified'],\n        lineColors: ['rgba(205, 38, 38, 0.5)', 'rgba(100, 100, 100, 0.5)'],\n        lineWidth: 3,\n        pointSize: 4,\n        pointFillColors: ['#c7254e'],\n        pointStrokeColors: ['#ffffff'],\n        ymin: -10,\n        ymax: -1,\n        smooth: true,\n        hideHover: false,\n        // hoverCallback: hoverCallbackFunc,\n        parseTime: false,\n        // postUnits: '%',\n        // preUnits: '$',\n        // dateFormat: dateFormatFunc,\n        // xLabels: \"month\",\n        // xLabelFormat: xLabelFormatFunc,\n        // xLabelAngle: 0,\n        yLabelFormat: yLabelPosFormatter,\n        goals: [-1.0],\n        goalLineColors: ['#c0c0c0'],\n        goalStrokeWidth: 1,\n        // events: [],\n        // eventStrokeWidth: 1,\n        // eventLineColors: #cccccc,\n        // axes: false,\n        grid: false,\n        // gridTextColor: #888888,\n        // gridTextSize: 12,\n        // gridTextFamiliy: sans-serif,\n        // gridTextWeight: normal,\n        resize: true,\n\n        // Area Chart Options\n        fillOpacity: 0.3,\n        behaveLikeLine: true\n      }\n    };\n\n    // Bar Chart Options\n    // http://morrisjs.github.io/morris.js/bars.html\n    homeCtrl.driverBarChart = {\n      data: [],\n      options: {\n        xkey: 'round',\n        ykeys: ['avgLap', 'fastLap'],\n        labels: ['Avg Lap', 'Fastest Lap'],\n        barColors: ['#777777', '#e74c3c'],\n        stacked: false,\n        hideHover: false,\n        // hoverCallback: hoverCallbackFunc,\n        // axes: false,\n        grid: false,\n        // gridTextColor: #888888,\n        // gridTextSize: 12,\n        // gridTextFamiliy: sans-serif,\n        // gridTextWeight: normal,\n        resize: true,\n        yLabelFormat: yLabelMPHFormatter\n      }\n    };\n\n    // Donut Chart Options\n    // http://morrisjs.github.io/morris.js/donuts.html\n    homeCtrl.driverDonutChart = {\n      data: [\n        {label: 'Top 5', value: 6},\n        {label: 'Top 10', value: 3},\n        {label: 'DNF', value: 1}\n      ],\n      options: {\n        colors: ['#e74c3c', '#c0392b', '#777777'],\n        resize: true\n        // formatter: donutFormatFunc\n      }\n    };\n\n    activate();\n\n    function activate() {\n      var promises = [getDriverRaceResults()]; //eslint-disable-line\n\n      return $q.all(promises).then(function () {\n        $log.info(ctrlName + ' Activated!');\n      });\n    }\n\n    function getDriverRaceResults() {\n      return DriversService.findAll()\n        .then(function (res) {\n          $log.info('Got '+ res.length + ' Driver Race results', res);\n          homeCtrl.driverLineChart.data = negativeData(res, ['qualifyPos', 'finishPos']);\n          homeCtrl.driverBarChart.data = res;\n          getDonutData(res);\n          // homeCtrl.driverDonutChart.data = DriversService.getDonutData(res);\n        },\n        function (error) {\n          $log.error('Error getting Driver Race results', error);\n        });\n    }\n\n    function getDonutData(data) {\n      return DriversService.getDonutData(data)\n        .then(function (res) {\n            homeCtrl.driverDonutChart.data = res;\n            $log.info('Donut Data ', homeCtrl.driverDonutChart.data);\n        });\n    }\n\n    // Convert finish and qualifying position numbers to negative values\n    // to support reversing y-axis of line chart\n    // Takes the data array and an array of properties to be converted to negatives\n    function negativeData(arr, props) {\n      var newArr = arr.map(function (x) {\n        for (var i = 0; i < props.length; i++) {\n          x[props[i]] = x[props[i]] > 0 ? -x[props[i]] : null;\n        }\n        return x;\n      });\n      return newArr;\n    }\n\n    // Formatting Y Label - Note: Math.round is not entirely accurate but close.\n    // Since Morris Chart doesn't have a \"force integer\" option, we are rounding\n    // to nearest whole number.\n    function yLabelPosFormatter(y) {\n      if (isNaN(y)) { return 'n/a'; }\n      y = Math.round(y);\n      return y === 0 ? 'P1' : 'P' + -y;\n    }\n\n    // Round speed to 2 decimal places and add MPH suffix\n    function yLabelMPHFormatter(y) {\n      return isNaN(y) ? 'n/a' : y.toFixed(2)+' MPH';\n    }\n\n  }\n}());\n\n/**\n * @ngdoc object\n * @name DriversService\n * @description Service for Drivers Data\n * @author Created by jboothe on 11/26/15\n */\n\n(function () {\n  'use strict';\n\n  angular.module('drivers', [])\n    .factory('DriversService', DriversService);\n\n  DriversService.$inject = ['$q'];\n  function DriversService ($q) {\n    var service = {\n      findAll: findAll,\n      findById: findById,\n      getDonutData: getDonutData\n    };\n\n    /*eslint-disable */\n    var driverSeasonResults = [\n      {'id': 1, 'round': 1, 'qualifyPos': 1, 'finishPos': 2, 'points': 45, 'status': 'Finished', 'avgLap':197.34, 'fastLap': 204.54},\n      {'id': 2, 'round': 2, 'qualifyPos': 3, 'finishPos': 4, 'points': 30, 'status': 'Finished', 'avgLap':188.34, 'fastLap': 200.1},\n      {'id': 3, 'round': 3, 'qualifyPos': 5, 'finishPos': 6, 'points': 20, 'status': '+Laps', 'avgLap':175.95, 'fastLap': 188.41},\n      {'id': 4, 'round': 4, 'qualifyPos': 1, 'finishPos': 3, 'points': 35, 'status': 'DNF', 'avgLap':187.34, 'fastLap': 204.54},\n      {'id': 5, 'round': 5, 'qualifyPos': 3, 'finishPos': 9, 'points': 5, 'status': '+Laps', 'avgLap':177.34, 'fastLap': 185.15},\n      {'id': 6, 'round': 6, 'qualifyPos': 2, 'finishPos': 1, 'points': 50, 'status': 'Finished', 'avgLap':167.34, 'fastLap': 179.03},\n      {'id': 7, 'round': 7, 'qualifyPos': 5, 'finishPos': 5, 'points': 50, 'status': 'Finished', 'avgLap':197.34, 'fastLap': 210.33},\n      {'id': 8, 'round': 8, 'qualifyPos': 1, 'finishPos': 10, 'points': 0, 'status': 'DNF', 'avgLap':207.34, 'fastLap': 222.22},\n      {'id': 9, 'round': 9, 'qualifyPos': 4, 'finishPos': 7, 'points': 15, 'status': '+Laps', 'avgLap':197.89, 'fastLap': 206.41},\n      {'id':10, 'round':10, 'qualifyPos': 10, 'finishPos': 5, 'points': 0, 'status': 'Finished', 'avgLap':185.29, 'fastLap': 196.54}\n    ];\n    /*eslint-enable */\n\n    return service;\n\n    function findAll() {\n      var deferred = $q.defer();\n      deferred.resolve(driverSeasonResults);\n      return deferred.promise;\n    }\n\n    function findById(id) {\n      var deferred = $q.defer();\n      var employee = driverSeasonResults[id - 1];\n      deferred.resolve(employee);\n      return deferred.promise;\n    }\n\n    function getDonutData(data) {\n      var deferred = $q.defer();\n      deferred.resolve(aggregateDonutData2(data));\n      return deferred.promise;\n    }\n\n    // function aggregateDonutData(data) {\n    //   var newArray,\n    //       obj = {};\n    //   data.forEach(function(item) {\n    //     item.status in obj ? obj[item.status] += 1 : obj[item.status] = 1;\n    //   });\n    //   newArray = Object.keys(obj).map(function(key) {\n    //     return {label: key, value: obj[key]};\n    //   });\n    //   return newArray;\n    // }\n\n    function aggregateDonutData2(data) {\n      var arr2 = Object.keys(arr2 = data.map(function(item) {\n          return item.status;\n      }).reduce(function(acc, curr){\n          // these 4 assignments all work the same\n          // acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\n          // acc[curr] = acc[curr] === undefined ? acc[curr] = 1 : acc[curr] + 1;\n          // acc[curr] = acc[curr] ? acc[curr] + 1 : acc[curr] = 1;\n          acc[curr] = acc[curr] + 1 || 1;\n          return acc;\n      }, [])).map(function(item){\n          return {label: item, value: arr2[item]};\n      });\n      return arr2;\n    }\n\n  }\n}());\n\n/**\n * Copyright © 2015 Jeff Boothe\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n*/\n\n'use strict';\n(function(){\n  angular.module('ngMorrisJs')\n\n    // Line and Area option settings: https://morrisjs.github.io/morris.js/lines.html\n    .directive('ngMorrisLineChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Line(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    })\n\n    .directive('ngMorrisAreaChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Area(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    })\n\n    // Bar option settings: https://morrisjs.github.io/morris.js/bars.html\n    .directive('ngMorrisBarChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Bar(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    })\n\n    // Donut option settings: https://morrisjs.github.io/morris.js/donuts.html\n    .directive('ngMorrisDonutChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Donut(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    });\n}());\n\n(function () {\n  'use strict';\n\n  config.$inject = [\"$urlRouterProvider\"];\n  angular\n    .module('ngMorrisJs')\n    .config(config);\n\n  function config($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/home');\n  }\n}());\n","(function () {\n  'use strict';\n\n  /**\n   * @ngdoc object\n   * @name line.controller:LineCtrl\n   *\n   * @description\n   *\n   */\n  angular\n    .module('line')\n    .controller('LineCtrl', LineCtrl);\n\n  function LineCtrl() {\n    var vm = this;\n    vm.ctrlName = 'LineCtrl';\n  }\n}());\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name home\n   * @description\n   *\n   */\n  angular\n    .module('home', [\n      'ui.router'\n    ]);\n}());\n","(function () {\n  'use strict';\n\n  angular\n    .module('home')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/home',\n        templateUrl: 'home/home.tpl.html',\n        controller: 'HomeCtrl',\n        controllerAs: 'homeCtrl'\n      });\n  }\n}());\n","/**\n * @ngdoc object\n * @name HomeCtrl\n * @description Controller for  screens\n * @author Created by jboothe on 11/25/15\n */\n\n(function () {\n  'use strict';\n  var ctrlName = 'HomeCtrl';\n\n  angular\n    .module('home')\n    .controller(ctrlName, HomeCtrl);\n\n  HomeCtrl.$inject = ['$log', '$q', 'DriversService'];\n  function HomeCtrl($log, $q, DriversService) {\n    var homeCtrl = this;\n\n    // Line & Area Chart Options\n    // http://morrisjs.github.io/morris.js/lines.html\n    homeCtrl.driverLineChart = {\n      data: [],\n      options: {\n        xkey: 'round',\n        ykeys: ['finishPos', 'qualifyPos'],\n        labels: ['Finished', 'Qualified'],\n        lineColors: ['rgba(205, 38, 38, 0.5)', 'rgba(100, 100, 100, 0.5)'],\n        lineWidth: 3,\n        pointSize: 4,\n        pointFillColors: ['#c7254e'],\n        pointStrokeColors: ['#ffffff'],\n        ymin: -10,\n        ymax: -1,\n        smooth: true,\n        hideHover: false,\n        // hoverCallback: hoverCallbackFunc,\n        parseTime: false,\n        // postUnits: '%',\n        // preUnits: '$',\n        // dateFormat: dateFormatFunc,\n        // xLabels: \"month\",\n        // xLabelFormat: xLabelFormatFunc,\n        // xLabelAngle: 0,\n        yLabelFormat: yLabelPosFormatter,\n        goals: [-1.0],\n        goalLineColors: ['#c0c0c0'],\n        goalStrokeWidth: 1,\n        // events: [],\n        // eventStrokeWidth: 1,\n        // eventLineColors: #cccccc,\n        // axes: false,\n        grid: false,\n        // gridTextColor: #888888,\n        // gridTextSize: 12,\n        // gridTextFamiliy: sans-serif,\n        // gridTextWeight: normal,\n        resize: true,\n\n        // Area Chart Options\n        fillOpacity: 0.3,\n        behaveLikeLine: true\n      }\n    };\n\n    // Bar Chart Options\n    // http://morrisjs.github.io/morris.js/bars.html\n    homeCtrl.driverBarChart = {\n      data: [],\n      options: {\n        xkey: 'round',\n        ykeys: ['avgLap', 'fastLap'],\n        labels: ['Avg Lap', 'Fastest Lap'],\n        barColors: ['#777777', '#e74c3c'],\n        stacked: false,\n        hideHover: false,\n        // hoverCallback: hoverCallbackFunc,\n        // axes: false,\n        grid: false,\n        // gridTextColor: #888888,\n        // gridTextSize: 12,\n        // gridTextFamiliy: sans-serif,\n        // gridTextWeight: normal,\n        resize: true,\n        yLabelFormat: yLabelMPHFormatter\n      }\n    };\n\n    // Donut Chart Options\n    // http://morrisjs.github.io/morris.js/donuts.html\n    homeCtrl.driverDonutChart = {\n      data: [\n        {label: 'Top 5', value: 6},\n        {label: 'Top 10', value: 3},\n        {label: 'DNF', value: 1}\n      ],\n      options: {\n        colors: ['#e74c3c', '#c0392b', '#777777'],\n        resize: true\n        // formatter: donutFormatFunc\n      }\n    };\n\n    activate();\n\n    function activate() {\n      var promises = [getDriverRaceResults()]; //eslint-disable-line\n\n      return $q.all(promises).then(function () {\n        $log.info(ctrlName + ' Activated!');\n      });\n    }\n\n    function getDriverRaceResults() {\n      return DriversService.findAll()\n        .then(function (res) {\n          $log.info('Got '+ res.length + ' Driver Race results', res);\n          homeCtrl.driverLineChart.data = negativeData(res, ['qualifyPos', 'finishPos']);\n          homeCtrl.driverBarChart.data = res;\n          getDonutData(res);\n          // homeCtrl.driverDonutChart.data = DriversService.getDonutData(res);\n        },\n        function (error) {\n          $log.error('Error getting Driver Race results', error);\n        });\n    }\n\n    function getDonutData(data) {\n      return DriversService.getDonutData(data)\n        .then(function (res) {\n            homeCtrl.driverDonutChart.data = res;\n            $log.info('Donut Data ', homeCtrl.driverDonutChart.data);\n        });\n    }\n\n    // Convert finish and qualifying position numbers to negative values\n    // to support reversing y-axis of line chart\n    // Takes the data array and an array of properties to be converted to negatives\n    function negativeData(arr, props) {\n      var newArr = arr.map(function (x) {\n        for (var i = 0; i < props.length; i++) {\n          x[props[i]] = x[props[i]] > 0 ? -x[props[i]] : null;\n        }\n        return x;\n      });\n      return newArr;\n    }\n\n    // Formatting Y Label - Note: Math.round is not entirely accurate but close.\n    // Since Morris Chart doesn't have a \"force integer\" option, we are rounding\n    // to nearest whole number.\n    function yLabelPosFormatter(y) {\n      if (isNaN(y)) { return 'n/a'; }\n      y = Math.round(y);\n      return y === 0 ? 'P1' : 'P' + -y;\n    }\n\n    // Round speed to 2 decimal places and add MPH suffix\n    function yLabelMPHFormatter(y) {\n      return isNaN(y) ? 'n/a' : y.toFixed(2)+' MPH';\n    }\n\n  }\n}());\n","/**\n * @ngdoc object\n * @name DriversService\n * @description Service for Drivers Data\n * @author Created by jboothe on 11/26/15\n */\n\n(function () {\n  'use strict';\n\n  angular.module('drivers', [])\n    .factory('DriversService', DriversService);\n\n  DriversService.$inject = ['$q'];\n  function DriversService ($q) {\n    var service = {\n      findAll: findAll,\n      findById: findById,\n      getDonutData: getDonutData\n    };\n\n    /*eslint-disable */\n    var driverSeasonResults = [\n      {'id': 1, 'round': 1, 'qualifyPos': 1, 'finishPos': 2, 'points': 45, 'status': 'Finished', 'avgLap':197.34, 'fastLap': 204.54},\n      {'id': 2, 'round': 2, 'qualifyPos': 3, 'finishPos': 4, 'points': 30, 'status': 'Finished', 'avgLap':188.34, 'fastLap': 200.1},\n      {'id': 3, 'round': 3, 'qualifyPos': 5, 'finishPos': 6, 'points': 20, 'status': '+Laps', 'avgLap':175.95, 'fastLap': 188.41},\n      {'id': 4, 'round': 4, 'qualifyPos': 1, 'finishPos': 3, 'points': 35, 'status': 'DNF', 'avgLap':187.34, 'fastLap': 204.54},\n      {'id': 5, 'round': 5, 'qualifyPos': 3, 'finishPos': 9, 'points': 5, 'status': '+Laps', 'avgLap':177.34, 'fastLap': 185.15},\n      {'id': 6, 'round': 6, 'qualifyPos': 2, 'finishPos': 1, 'points': 50, 'status': 'Finished', 'avgLap':167.34, 'fastLap': 179.03},\n      {'id': 7, 'round': 7, 'qualifyPos': 5, 'finishPos': 5, 'points': 50, 'status': 'Finished', 'avgLap':197.34, 'fastLap': 210.33},\n      {'id': 8, 'round': 8, 'qualifyPos': 1, 'finishPos': 10, 'points': 0, 'status': 'DNF', 'avgLap':207.34, 'fastLap': 222.22},\n      {'id': 9, 'round': 9, 'qualifyPos': 4, 'finishPos': 7, 'points': 15, 'status': '+Laps', 'avgLap':197.89, 'fastLap': 206.41},\n      {'id':10, 'round':10, 'qualifyPos': 10, 'finishPos': 5, 'points': 0, 'status': 'Finished', 'avgLap':185.29, 'fastLap': 196.54}\n    ];\n    /*eslint-enable */\n\n    return service;\n\n    function findAll() {\n      var deferred = $q.defer();\n      deferred.resolve(driverSeasonResults);\n      return deferred.promise;\n    }\n\n    function findById(id) {\n      var deferred = $q.defer();\n      var employee = driverSeasonResults[id - 1];\n      deferred.resolve(employee);\n      return deferred.promise;\n    }\n\n    function getDonutData(data) {\n      var deferred = $q.defer();\n      deferred.resolve(aggregateDonutData2(data));\n      return deferred.promise;\n    }\n\n    // function aggregateDonutData(data) {\n    //   var newArray,\n    //       obj = {};\n    //   data.forEach(function(item) {\n    //     item.status in obj ? obj[item.status] += 1 : obj[item.status] = 1;\n    //   });\n    //   newArray = Object.keys(obj).map(function(key) {\n    //     return {label: key, value: obj[key]};\n    //   });\n    //   return newArray;\n    // }\n\n    function aggregateDonutData2(data) {\n      var arr2 = Object.keys(arr2 = data.map(function(item) {\n          return item.status;\n      }).reduce(function(acc, curr){\n          // these 4 assignments all work the same\n          // acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\n          // acc[curr] = acc[curr] === undefined ? acc[curr] = 1 : acc[curr] + 1;\n          // acc[curr] = acc[curr] ? acc[curr] + 1 : acc[curr] = 1;\n          acc[curr] = acc[curr] + 1 || 1;\n          return acc;\n      }, [])).map(function(item){\n          return {label: item, value: arr2[item]};\n      });\n      return arr2;\n    }\n\n  }\n}());\n","/**\n * Copyright © 2015 Jeff Boothe\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n*/\n\n'use strict';\n(function(){\n  angular.module('ngMorrisJs')\n\n    // Line and Area option settings: https://morrisjs.github.io/morris.js/lines.html\n    .directive('ngMorrisLineChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Line(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    })\n\n    .directive('ngMorrisAreaChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Area(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    })\n\n    // Bar option settings: https://morrisjs.github.io/morris.js/bars.html\n    .directive('ngMorrisBarChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Bar(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    })\n\n    // Donut option settings: https://morrisjs.github.io/morris.js/donuts.html\n    .directive('ngMorrisDonutChart', function () {\n      return {\n        restrict: 'EA',\n        scope: {\n          chartData: '=',\n          chartOptions: '='\n        },\n        replace: true,\n        template: '<div></div>',\n        link: function link(scope, element) {\n          scope.$watch('chartData', function () {\n            if (scope.chartData && scope.chartOptions) {\n              scope.chartOptions.element = element;\n              scope.chartOptions.data = scope.chartData;\n              if (!scope.chartInstance) { scope.chartInstance = new Morris.Donut(scope.chartOptions); }\n              else { scope.chartInstance.setData(scope.chartData); }\n            }\n          });\n        }\n      };\n    });\n}());\n","(function () {\n  'use strict';\n\n  angular\n    .module('ngMorrisJs')\n    .config(config);\n\n  function config($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/home');\n  }\n}());\n"],"sourceRoot":"/source/"}